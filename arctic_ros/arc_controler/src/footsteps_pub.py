import rospy
from geometry_msgs.msg import Pose, PoseArray
from jsk_recognition_msgs.msg import TorusArray, Torus
from std_msgs.msg import Header
from math import *
import time

# arrayFR = [0.15305882352941177, -0.1132, -0.15, 0.193188235294117652, -0.1132, -0.15, 0.23307058823529413, -0.1132, -0.15, 0.2731294117647059, -0.1132, -0.15, 0.31301176470588236, -0.1132, -0.15, 0.353070588235294103, -0.1132, -0.15, 0.39395294117647055, -0.1132, -0.15, 0.43342352941176464, -0.1132, -0.15, 0.47348235294117638, -0.1132, -0.15, 0.5137647058823519, -0.1132, -0.15]
# arrayFL = [0.15305882352941177, 0.1132, -0.15, 0.193188235294117652, 0.1132, -0.15, 0.23307058823529413, 0.1132, -0.15, 0.2731294117647059, 0.1132, -0.15, 0.31301176470588236, 0.1132, -0.15, 0.353070588235294103, 0.1132, -0.15, 0.39395294117647055, 0.1132, -0.15, 0.43342352941176464, 0.1132, -0.15, 0.47348235294117638, 0.1132, -0.15, 0.5137647058823519, 0.1132, -0.15]
# arrayBR = [-0.12694117647058825, -0.1132, -0.15, -0.08635294117647055, -0.1132, -0.15, -0.04629411764705873, -0.1132, -0.15, -0.0061294117647059, -0.1132, -0.15, 0.034011764705882352, -0.1132, -0.15, 0.0744070588235294092, -0.1132, -0.15, 0.11452941176470542, -0.1132, -0.15, 0.1542352941176464, -0.1132, -0.15, 0.19482352941176384, -0.1132, -0.15, 0.2347647058823519, -0.1132, -0.15]
# arrayBL = [-0.12694117647058825, 0.1132, -0.15, -0.08635294117647055, 0.1132, -0.15, -0.04629411764705873, 0.1132, -0.15, -0.0061294117647059, 0.1132, -0.15, 0.034011764705882352, 0.1132, -0.15, 0.0744070588235294092, 0.1132, -0.15, 0.11452941176470542, 0.1132, -0.15, 0.1542352941176464, 0.1132, -0.15, 0.1948]

arrayFR = [0.14558823529411766, -0.1139, -0.15, 0.21029411764705888, -0.1139, -0.15, 0.2691176470588237, -0.1139, -0.15, 0.35357872245265465, -0.12930519498263407, -0.15, 0.41498476687191393, -0.17487802119961063, -0.15, 0.49241016116379904, -0.22827540209891167, -0.15, 0.5555446728154455, -0.25949203968963364, -0.15, 0.6185022280022778, -0.27303770791000326, -0.15, 0.6832081103552188, -0.27303770791000326, -0.15, 0.7479139927081597, -0.27303770791000326, -0.15, 0.8126198750611007, -0.27303770791000326, -0.15, 0.8773257574140416, -0.27303770791000326, -0.15, 0.9420316397669826, -0.27303770791000326, -0.15, 1.0067375221199235, -0.27303770791000326, -0.15, 1.077325757414041, -0.27303770791000326, -0.15, 1.1302669338846292, -0.27303770791000326, -0.15]
arrayFL = [0.14558823529411766, 0.1139, -0.15, 0.21617647058823533, 0.1139, -0.15, 0.2750000000000002, 0.1139, -0.15, 0.35357872245265465, 0.09849480501736593, -0.15, 0.41498476687191393, 0.052921978800389374, -0.15, 0.49241016116379904, -0.00047540209891168417, -0.15, 0.5555446728154455, -0.03169203968963363, -0.15, 0.6185022280022778, -0.04523770791000323, -0.15, 0.6832081103552188, -0.04523770791000323, -0.15, 0.7479139927081597, -0.04523770791000323, -0.15, 0.8126198750611007, -0.04523770791000323, -0.15, 0.8773257574140416, -0.04523770791000323, -0.15, 0.9420316397669826, -0.04523770791000323, -0.15, 1.0067375221199235, -0.04523770791000323, -0.15, 1.077325757414041, -0.04523770791000323, -0.15, 1.1302669338846292, -0.04523770791000323, -0.15]
arrayBR = [-0.12441176470588236, -0.1139, -0.15, -0.05382352941176466, -0.1139, -0.15, 0.0050000000000001155, -0.1139, -0.15, 0.0835787224526546, -0.12930519498263407, -0.15, 0.1449847668719139, -0.17487802119961063, -0.15, 0.222410161163799, -0.22827540209891167, -0.15, 0.28554467281544554, -0.25949203968963364, -0.15, 0.34850222800227787, -0.27303770791000326, -0.15, 0.4132081103552188, -0.27303770791000326, -0.15, 0.47791399270815976, -0.27303770791000326, -0.15, 0.5485022280022771, -0.27303770791000326, -0.15, 0.6073257574140416, -0.27303770791000326, -0.15, 0.6720316397669825, -0.27303770791000326, -0.15, 0.7426198750610999, -0.27303770791000326, -0.15, 0.8073257574140409, -0.27303770791000326, -0.15, 0.860266933884629, -0.27303770791000326, -0.15]
arrayBL = [-0.12441176470588236, 0.1139, -0.15, -0.05382352941176466, 0.1139, -0.15, 0.0050000000000001155, 0.1139, -0.15, 0.0835787224526546, 0.09849480501736593, -0.15, 0.1449847668719139, 0.052921978800389374, -0.15, 0.222410161163799, -0.00047540209891168417, -0.15, 0.28554467281544554, -0.03169203968963363, -0.15, 0.3543845809434543, -0.04523770791000323, -0.15, 0.4132081103552188, -0.04523770791000323, -0.15, 0.47791399270815976, -0.04523770791000323, -0.15, 0.5485022280022771, -0.04523770791000323, -0.15, 0.613208110355218, -0.04523770791000323, -0.15, 0.6720316397669825, -0.04523770791000323, -0.15, 0.7426198750610999, -0.04523770791000323, -0.15, 0.8073257574140409, -0.04523770791000323, -0.15, 0.8661492868258055, -0.04523770791000323, -0.15]



posesFR = PoseArray()
posesFR.header = Header()

posesFL = PoseArray()
posesFL.header = Header()

posesBR = PoseArray()
posesBR.header = Header()

posesBL = PoseArray()
posesBL.header = Header()
count = 0

def posePub():
    global count, pubFR
    posesFR.header.frame_id = "root"
    posesFR.header.seq = rospy.Time.now()

    posesFL.header.frame_id = "root"
    posesFL.header.seq = rospy.Time.now()

    posesBR.header.frame_id = "root"
    posesBR.header.seq = rospy.Time.now()

    posesBL.header.frame_id = "root"
    posesBL.header.seq = rospy.Time.now()
    count += 1

    for i in range(0, len(arrayFR), 3):
        FR = torusTrace("p1", arrayFR[i], arrayFR[i + 1], arrayFR[i + 2])
        FL = torusTrace("p1", arrayFL[i], arrayFL[i + 1], arrayFL[i + 2])
        BR = torusTrace("p1", arrayBR[i], arrayBR[i + 1], arrayBR[i + 2])
        BL = torusTrace("p1", arrayBL[i], arrayBL[i + 1], arrayBL[i + 2])
        posesFR.poses.append(FR.pose)
        posesFL.poses.append(FL.pose)
        posesBR.poses.append(BR.pose)
        posesBL.poses.append(BL.pose)
    print(count)
    pubFR.publish(posesFR)
    pubFL.publish(posesFL)
    pubBR.publish(posesBR)
    pubBL.publish(posesBL)


def torusTrace(name, x, y, z):
    name = Torus()
    name.header.frame_id = "dummy"
    name.large_radius = 0.03
    name.small_radius = 0.01
    p1 = Pose()

    p1.position.x = x
    p1.position.y = y

    p1.position.z = z
    p1.orientation.x = sqrt(0.5)

    name.pose = p1

    return name    


def main():
    global pubFR, pubFL, pubBR, pubBL, rate
    rospy.init_node('pointcloud_node', anonymous=True)
    pubFR = rospy.Publisher('/FootprintFR', PoseArray, queue_size=1)
    pubFL = rospy.Publisher('/FootprintFL', PoseArray, queue_size=1)
    pubBR = rospy.Publisher('/FootprintBR', PoseArray, queue_size=1)
    pubBL = rospy.Publisher('/FootprintBL', PoseArray, queue_size=1)
    rate = rospy.Rate(1)

if __name__ == '__main__':
    try:
       main()
    except rospy.ROSInterruptException:
       pass

while not rospy.is_shutdown():
    posePub()
    rate.sleep()